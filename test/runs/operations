:

# run through the basic operations, enter, leave, create, destroy

function test_ws_enter {
    ws enter default
    test "${_ws__current}" = "default" || return 1
    test "$(ws)" = "default" || return 1
    test "$(ws enter)" = "default" || return 1
    test "$(ws list)" = "default@*" || return 1
    test "$(ws stack | tr '\n' ' ')" = "default* (${cdir}) " || return 1
}

function test_ws_leave {
    ws leave
    test "${_ws__current}" = "" || return 1
    test "${_ws__stack[*]}" = "" || return 1
    test "$(ws stack)" = "($cdir)" || return 1
}

function test_ws_create {
    ws create foobar
    ws enter default
    test -d "$WS_DIR/default" || return 1
    test "${_ws__stack[*]}" = ":$cdir foobar:$WS_DIR/foobar" || return 1
    test "${_ws__current}" = "default" || return 1
    test "$(ws stack | tr '\n' ' ')" = "default* foobar (${cdir}) " || return 1

    ws leave
    test "${_ws__current}" = "foobar" || return 1
    test "${_ws__stack[*]}" = ":$cdir" || return 1
    test "$(_ws_getdir)" = "$WS_DIR/foobar" || return 1
    ws destroy foobar
}

function test_hook_call {
    # checking the hook system
    ( echo 'TEST_VALUE_1=hi'
      echo 'TEST_VALUE_2=bye'
    ) >> $WS_DIR/.ws/config.sh
    _ws_run_hooks enter default || return 1
    test x${TEST_VALUE_1:+X} = x || return 1
    test x${TEST_VALUE_2:+X} = x || return 1
}

function test_create_plugins {
    ws create foobar
    test -d "$WS_DIR/foobar" || return 1
    test -d "$WS_DIR/foobar/.ws" || return 1
    test -s "$WS_DIR/foobar/.ws/hook.sh" -a -x "$WS_DIR/foobar/.ws/hook.sh" || return 1
    test -s "$WS_DIR/foobar/.ws/config.sh" || return 1
    test "$_ws__current" = "foobar" || return 1
    test -d "$WS_DIR/foobar/.ws/plugins" || return 1
    for plugin in $(ls -1 $WS_DIR/.ws/plugins); do
        test -f $WS_DIR/foobar/.ws/plugins/$plugin || return 1
    done
}

function test_relink {
    ws relink foobar
    test $(readlink $HOME/workspace) = "$WS_DIR/foobar" || return 1
    test "$(ws list)" = "$(echo 'default'; echo 'foobar@*')" || return 1
}

function test_ws_destroy {
    ws destroy foobar #>/dev/null
    test "${_ws__current}" = "" || return 1
    test ! -d "$WS_DIR/foobar" || return 1
    test ! -h "$HOME/workspace" || return 1
    test "$(ws list)" = 'default' || return 1
}

run_test ws+enter          test_ws_enter
run_test ws+leave          test_ws_leave
run_test ws+create         test_ws_create
run_test hook+call         test_hook_call
run_test create-plugins    test_create_plugins
run_test relink            test_relink
run_test ws+destroy        test_ws_destroy
