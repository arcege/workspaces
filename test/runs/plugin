:

# testing for plugin
pluginfile=$TMPDIR/plugin
cat > $pluginfile <<'EOF'
:

plugin_ext_value=plugin-run
case ${wshook__op} in
    create) echo creating;;
    destroy) echo destroying;;
    enter) echo entering;;
    leave) echo leaving;;
esac
EOF

packaged_plugins="\
bitbucket
cdpath
github
java
nvm
pythonpath
vagrant
virtualenv
virtualenvwrapper"

function test_plugin_install {
    ws plugin available >$cmdout
    test $? -eq 0 -a "$(cat $cmdout)" = "${packaged_plugins}" || return 1
    ws plugin install $TMPDIR/plugin
    test $? -eq 0 -a -x $WS_DIR/.ws/plugins/plugin || return 2
    ws plugin available >$cmdout
    new_plugins=$(echo "${packaged_plugins}"$'\n'"plugin" | sort)
    test $? -eq 0 -a "$(cat $cmdout)" = "${new_plugins}" || return 3
}

function test_ws_create_plugin {
    ws create --plugins plugin testplugin1 >$cmdout 2>$cmderr
    test $? -eq 0 -a -f $WS_DIR/testplugin1/.ws/plugins/plugin || return 1
    test "$(cat $cmdout)" = $'creating\nentering' || return 1
    test "x${plugin_ext_value}" = xplugin-run || return 1
    var=$(ws plugin list testplugin1)
    test $? -eq 0 -a "x$var" = xplugin || return 1
    ws plugin remove testplugin1 plugin >$cmdout 2>$cmderr
    test $? -eq 0 -a ! -e $WS_DIR/testplugin1/.ws/plugins/plugin || return 1
    ws plugin add testplugin1 plugin
    test $? -eq 0 -a -f $WS_DIR/testplugin1/.ws/plugins/plugin || return 1
}

function test_plugin_reinstall {
    ws plugin install $TMPDIR/plugin >$cmdout 2>$cmderr
    test $? -eq 1 -a "$(cat $cmderr)" = "Plugin plugin exists" || return 1
    ws plugin install -f $TMPDIR/plugin >$cmdout 2>$cmderr
    test $? -eq 0 -a "$(cat $cmdout)" = "" -a -x $WS_DIR/.ws/plugins/plugin || return 1
    test ! -e $WS_DIR/.ws/plugins/other || return 1
    ws plugin install -n other $TMPDIR/plugin
    test $? -eq 0 -a -x $WS_DIR/.ws/plugins/other || return 1
    ws create --plugins "other" testplugin2 >$cmdout 2>$cmderr
    test $? -eq 0 -a "$(ws plugin list testplugin2)" = "other" || return 1
    test ! -e $WS_DIR/testplugin2/.ws/plugins/plugin -a -f $WS_DIR/testplugin2/.ws/plugins/other ||
        return 1
    ws leave >$cmdout 2>$cmderr
    ws plugin uninstall other >$cmdout 2>$cmderr
    test $? -eq 0 -a ! -e $WS_DIR/.ws/plugins/other -a ! -e $WS_DIR/testplugin2/.ws/plugin/other ||
        return 1
}

run_test plugin-install        test_plugin_install
run_test ws+create-plugin      test_ws_create_plugin
run_test plugin-reinstall      test_plugin_reinstall
