:

cat > $TMPDIR/config_vars <<EOF
doset=false
dontset=true
EOF

# more intensive testing of the hooks
cat > "$TMPDIR/foobar-hook.sh" <<'EOF'
:
# this is sourced by `ws` (workspaces)
# commands could be run and the environment/shell could be modified.
# anything set by the enter operation should be wound back by leave;
# similarly, anything set by create should be removed by destroy.

wsstate=$wshook__op

if [ -n "$myname" ]; then
    users_name=$myname
fi

# any variables you use here should be unset at the end; local
# would not work as this is source'd
case ${wshook__op} in
    # the current context is NOT this workspace
    create)
        Which=$InConfig
        ;;

    # the current context is NOT this workspace
    destroy)
        IsDestroyed=ImDyingImDying
        ;;

    # the current context IS this workspace
    enter)
        HasEntered=yep
        ;;

    # the current context IS this workspace
    leave)
        HasLeft=Elvis
        ;;
esac
EOF

cat > "$TMPDIR/foobar-config" <<'EOF'
InConfig=$wshook__workspace
EOF

function test_ws_convert {
    # ws convert
    mkdir -p $WS_DIR/foobar1
    _ws_convert_ws foobar1 'cdpath java' $TMPDIR/config_vars
    test -d $WS_DIR/foobar1/.ws || return 1
    test -s "$WS_DIR/foobar1/.ws/hook.sh" -a -x "$WS_DIR/foobar1/.ws/hook.sh" ||
        return 1
    test -s "$WS_DIR/foobar1/.ws/config.sh" || return 1
    result=$(ws config get foobar1 doset)
    test $? -eq 0 -a "$result" = "false" || return 1
    result=$(ws config get foobar1 dontset) || return 1
    rm -rf $WS_DIR/foobar1
}

function test_ws_create_hook {
    ws create foobar
    cp $TMPDIR/foobar-hook.sh $WS_DIR/foobar/.ws/hook.sh
    cp $TMPDIR/foobar-config $WS_DIR/foobar/.ws/config.sh

    _ws_run_hooks enter foobar; rc=$?
    test $rc -eq 0 || return 1
    test x$wsstate = xenter || return 1
    test x$HasEntered = xyep || return 1
    test x$HasLeft = x || return 1
    test x$InConfig = x || return 1
    _ws_run_hooks leave foobar
    test x$wsstate = xleave || return 1
    test x$HasLeft = xElvis || return 1
    _ws_run_hooks create foobar
    test x$Which = x$WS_DIR/foobar || return 1
    test x${InConfig:+X} = x || return 1

    unset wsstate IsDestroyed HasEntered HasLeft
    cat /dev/null > $cmdout
    cat /dev/null > $cmderr
    _ws_cmd_hook copy foobar default
    if [ $? -ne 0 ] || ! cmp $(_ws_getdir foobar)/.ws/hook.sh $(_ws_getdir default)/.ws/hook.sh > $cmdout 2> $cmderr; then
        ( echo "== stdout =="; cat $cmdout; echo
          echo "== stderr =="; cat $cmderr; echo
        ) >&2
        return 1
    fi
}

function test_hook_export {
    _ws_cmd_hook save foobar $TMPDIR/hook-save.sh || return 1
    sed -i -e '/HasEntered/s/=yep/=yes/' "$TMPDIR/hook-save.sh"
    _ws_cmd_hook load foobar "$TMPDIR/hook-save.sh"
    if [ $? -ne 0 ] || ! cmp $(_ws_getdir foobar)/.ws/hook.sh "$TMPDIR/hook-save.sh" > $cmdout 2> $cmderr; then
        ( echo "== stdout =="; cat $cmdout; echo
          echo "== stderr =="; cat $cmderr; echo
        ) >&2
        return 1
    fi
}

function test_hook_run {
    _ws_cmd_hook run
    test x$wsstate = xenter || return 1
}

function test_hook_cfgfile {
    echo myname=michael > $TMPDIR/hook.cfg
    unset users_name
    _ws_run_hooks enter foobar; rc=$?
    test $rc -eq 0 || return 1
    test -z "$users_name" || return 1

    _ws_run_hooks enter foobar "" $TMPDIR/hook.cfg; rc=$?
    test $rc -eq 0 || return 1
    test "$users_name" = michael || return 1

    unset users_name
    ws enter foobar $TMPDIR/hook.cfg
    test "$users_name" = michael || return 1

    unset users_name
    ws enter foobar myname=michael
    test "$users_name" = michael || return 1
}

unset wsstate IsDestroyed HasEntered HasLeft
run_test ws+create-hooks     test_ws_create_hook
run_test hook-export         test_hook_export
run_test hook-run            test_hook_run
run_test hook-cfgfile        test_hook_cfgfile
unset wsstate IsDestroyed HasEntered HasLeft
