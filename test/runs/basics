:

# check the existence of the main routine ('ws') and subroutines
function validate_app_functions {
    command -v ws >&4 || return 1
    command -v _ws_cmd_help >&4 || return 1
    command -v _ws_cmd_enter >&4 || return 1
    command -v _ws_cmd_leave >&4 || return 1
    command -v _ws_cmd_create >&4 || return 1
    command -v _ws_cmd_destroy >&4 || return 1
    command -v _ws_cmd_relink >&4 || return 1
    command -v _ws_cmd_list >&4 || return 1
    command -v _ws_validate >&4 || return 1
    command -v _ws_cmd_stack >&4 || return 1
    command -v _ws_stack >&4 || return 1
    command -v _ws_getdir >&4 || return 1
    command -v _ws_link >&4 || return 1
    command -v _ws_cmd_initialize >&4 || return 1
    command -v _ws_cmd_upgrade >&4 || return 1
    command -v _ws_copy_skel >&4 || return 1
    command -v _ws_generate_hook >&4 || return 1
    command -v _ws_generate_config >&4 || return 1
    command -v _ws_cmd_hook >&4 || return 1
    command -v _ws_run_hooks >&4 || return 1
    command -v _ws_cmd_config >&4 || return 1
    command -v _ws_config_edit >&4 || return 1
    command -v _ws_cmd_plugin >&4 || return 1
    command -v _ws_parse_configvars >&4 || return 1
    command -v _ws_prompt_yesno >&4 || return 1
    command -v _ws_convert_ws >&4 || return 1
    command -v _ws_error >&4 || return 1
}

# check the global variables
function validate_global_vars {
    if [ $_ws_shell = bash ]; then
        test "$(declare -p WS_DIR)" = "declare -- WS_DIR=\"$HOME/workspaces\"" || return 1
        test "$(declare -p WS_VERSION)" = "declare -- WS_VERSION=\"${versionstr}\"" || return 1
        test "$(declare -p _ws__current)" = 'declare -- _ws__current=""' || return 1
        if [ ${BASH_VERSINFO[0]} -ge 5 ] || [ ${BASH_VERSINFO[0]} -eq 4 -a ${BASH_VERSINFO[1]} -ge 4 ]; then
            test "$(declare -p _ws__stack)" = "declare -a _ws__stack=()" || return 1
        else
            test "$(declare -p _ws__stack)" = "declare -a _ws__stack='()'" || return 1
        fi
    elif [ $_ws_shell = zsh ]; then
        autoload is-at-least
        if is-at-least 5.7; then
            test "$(declare -p WS_DIR)" = "typeset -g WS_DIR=$HOME/workspaces" || return 1
            test "$(declare -p WS_VERSION)" = "typeset -g WS_VERSION=${versionstr}" || return 1
            test "$(declare -p _ws__current)" = "typeset -g _ws__current=''" || return 1
            test "$(declare -p _ws__stack | sed 's/( *)/()/')" = $'typeset -g -a _ws__stack=()' || return 1
        else
            test "$(declare -p WS_DIR)" = "typeset WS_DIR=$HOME/workspaces" || return 1
            test "$(declare -p WS_VERSION)" = "typeset WS_VERSION=${versionstr}" || return 1
            test "$(declare -p _ws__current)" = "typeset _ws__current=''" || return 1
            test "$(declare -p _ws__stack | sed 's/( *)/()/')" = $'typeset -a _ws__stack\n_ws__stack=()' || return 1
        fi
    fi
}

# a few unit tests
function test_unit_1 {
    result=$(_ws_getdir)
    rc=$?
    test $rc -eq 1 -a "$result" = "" || return 1
    result=$(_ws_link get)
    rc=$?
    test $rc -eq 1 -a "$result" = "" || return 1
    result=$(_ws_link set 2>&1)
    rc=$?
    test $rc -eq 1 -a "$result" = "Error: expecting directory" || return 1
    mkdir $HOME/workspace
    result=$(_ws_link set /usr 2>&1)
    rc=$?
    test $rc -eq 1 -a "$result" = "Error: ~/workspace is not a symlink" || return 1
    rmdir $HOME/workspace
}

run_test app-functions validate_app_functions
run_test global-vars   validate_global_vars
run_test unit1         test_unit_1
